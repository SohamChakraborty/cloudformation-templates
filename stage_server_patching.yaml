AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cloudformation template to create maintenance window, register targets to maintenance window, create task for maintenance window and set up S3 bucket logging for a certain instance environment'
Resources:
  MaintenanceWindow:
    Type: 'AWS::SSM::MaintenanceWindow'
    Properties:
      Name: stage-instances-maintenance-window
      Description: SSM maintenance window to automate AWS patch manager tasks for stage servers in AWS2 account
      Duration: '5'
      Cutoff: '1'
      Schedule: cron(00 02 ? * FRI *)
      Tags:
        - Key: Environment
          Value: stage
      AllowUnassociatedTargets: false
      ScheduleTimezone: UTC
  MaintenanceWindowTarget:
    Type: 'AWS::SSM::MaintenanceWindowTarget'
    Properties:
      Name: stage-instances-maintenance-window-target
      Description: >-
        Defines the EC2 Instance Targets for Maintenance Window:
        Patch-Manager-Maintenance-Window-Stage
      ResourceType: INSTANCE
      WindowId: !Ref MaintenanceWindow
      Targets:
        - Key: 'tag:Environment'
          Values:
            - stage
    DependsOn: MaintenanceWindow
#  SnsTopic:
#    Type: 'AWS::SNS::Topic'
#    Properties:
#      Subscription:
#        - Endpoint: chakraborty@pythian.com
#          Protocol: email
#      TopicName: MaintenanceWindowNotifications-stage
  MaintenanceWindowTask:
    Type: 'AWS::SSM::MaintenanceWindowTask'
    Properties:
      Name: stage-instances-maintenance-window-task
      Description: >-
        Defines the Task for Maintenance Window:
        Patch-Manager-Maintenance-Window-Stage
      ServiceRoleArn:
        'Fn::GetAtt':
          - MaintWindowIamRole
          - Arn
      Priority: 1
      MaxErrors: 1
      MaxConcurrency: 10
      Targets:
        - Key: WindowTargetIds
          Values:
            - !Ref MaintenanceWindowTarget
      TaskType: RUN_COMMAND
      WindowId: !Ref MaintenanceWindow
      TaskArn: AWS-RunPatchBaseline
      TaskInvocationParameters:
        MaintenanceWindowRunCommandParameters:
          Parameters:
            Operation:
              - Install
          ServiceRoleArn:
            'Fn::GetAtt':
              - MaintWindowIamRole
              - Arn
          OutputS3BucketName: !Ref LoggingS3Bucket
          OutputS3KeyPrefix: stage
            #          NotificationConfig:
            #            NotificationArn:
            #              Ref: SnsTopic
            #            NotificationEvents:
            #              - All
            #            NotificationType: Command
  MaintWindowIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
                - ec2.amazonaws.com
                  #                - sns.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole'
      Policies: []
      RoleName: MaintWindowIamRoleQfJ
  IamInlinePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: taskRolePermissions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'iam:PassRole'
            Resource:
              'Fn::GetAtt':
                - MaintWindowIamRole
                - Arn
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:PutObjectAcl'
            Resource:
              'Fn::Join':
                - ''
                - - 'Fn::GetAtt':
                      - LoggingS3Bucket
                      - Arn
                  - /*
                    #          - Effect: Allow
                    #            Action:
                    #              - 'sns:Publish'
                    #            Resource:
                    #              Ref: SnsTopic
      Roles:
        - !Ref MaintWindowIamRole
  LoggingS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: patching-logging-bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
Parameters: {}
Metadata: {}
Conditions: {}
Outputs:
  LoggingS3Bucket:
    Description: Name of the S3 bucket where logs will be saved
    Value: !Ref LoggingS3Bucket
    Export:
      Name: LoggingS3Bucket
  MaintenanceWindow:
    Description: Name of the maintenance window
    Value: !Ref MaintenanceWindow
    Export:
      Name: MaintenanceWindow-stage-instances
  MaintenanceWindowTarget:
    Description: Name of the maintenance window targets
    Value: !Ref MaintenanceWindowTarget
    Export:
      Name: MaintenanceWindowTarget-stage-instances
